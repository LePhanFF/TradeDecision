# Create V9.4.3 NinjaAddon V2.2 (Refactored to Generic Names)

ROLE
You are a senior / architect NinjaTrader 8 Add-On engineer and Auction Market Theory educator. Produce a single, compilable NinjaTrader 8 Add-On in C# that implements the COMPLETE “TPO Analysis v9.4.3 (FULL)” prompt locally, using live 5-minute OHLC bars from NinjaTrader’s BarsRequest API. Do not ask clarifying questions—assume all requirements are final and deliver the code and run instructions in one shot.

OBJECTIVE
Build a thread-safe NT8 Add-On that:
1. Subscribes to NQ, ES, YM (##-## continuous or active expiry).
2. Every 5-minute closed bar:
   - Updates internal Auction/TPO state.
   - Computes all metrics from TPO Analysis v9.4.3 (FULL).
   - Stores structured results as JSON (machine-readable, verbose, forward-compatible).
   - Emits human-readable tables and commentary (journal style).
3. Minimal UI: Control Center “New” menu item toggles Start/Stop.
4. Versioning:
   - Code constant: VersionTag = "v9.4.3".
   - JSON: "schemaVersion":"tpo.v9_4_3".
   - No version in class/file/folder names (use generic "TPOAddon").
   - ROADMAP.md and README.md track roadmap versions.

DATA & SESSIONS
- Inputs: 5m OHLC from BarsRequest.
- Trading hours: Prefer TradingHours.Get("CME US Index Futures ETH"); compute RTH profile using the RTH segment; optionally compute ON metrics when available.
- Prior-day references: H/L, TPO VAH/POC/VAL, Volume VA if accessible; roll at RTH close.
- Missing inputs must degrade confidence with explicit “degradedBy: [...]” reasons.

METRICS TO IMPLEMENT (superset v9.3 → v9.4.2)
- Opening location vs prior value/range.
- Opening type (OD/OTD/ORR/OA).
- Initial Balance (IB) tracking.
- 15-minute dPOC tracking (rolling).
- Full TPO value area (VAH, VAL, POC).
- HVN/LVN arrays (track acceptance/rejection).
- Peer gap-close tracking (cross-index ES/NQ/YM).
- Morphology detection (P-day, b-day, D-day, B-day).
- Single prints, poor highs/lows, one-timeframing.
- Day-type classification with morph logic.
- Dynamic confidence scoring (weighted).
- Educational playbooks (gap-and-go, IB breakout, failed auction, double distribution).

OUTPUTS
- Base path: Core.Globals.UserDataDir\NinjaAddOn\TPOAddon\
- Files:
  - JSONL file: structured metrics every 5m (machine-readable).
  - Session summary JSON.
  - Latest snapshot JSON.
  - Journal text log.
- Output window:
  - Human-readable tables (VAH/POC/VAL, IB, day-type, confidence).
  - Scenario commentary (playbook triggers).

THREAD-SAFETY REQUIREMENTS
- UI marshaling: Dispatcher.
- Shared state: protect with stateLock.
- File I/O: serialize via fileLock.
- Header printing: Interlocked.
- Clean shutdown: unsubscribe BarsRequest.Update, Cancel/Dispose requests.

BAR-PROCESSING RULES
- Process only CLOSED bars.
- Track lastProcessedIndex per instrument.
- Update Auction/TPO structures incrementally.
- At session boundaries (RTH open/close), finalize profile and roll references forward.

UI REQUIREMENTS
- Text field: last time updated.
- Text box: human-readable output (no JSON echo).
- Bias widget: bullish/bearish/neutral with green/red/yellow flag.
- Widget: day-type classification.
- Text box: evidence.
- Graph: developing POC migration.
- Confidence score from JSON.
- Morph warning widget (with evidence).

DELIVERABLES
1. Brief run instructions (≤ 8 lines).
2. Complete, compilable NinjaTrader 8 Add-On C# code (no placeholders).
3. Code must include:
   - Full TPO analysis logic per v9.4.3.
   - JSON writer + journal logger.
   - Thread-safe design as above.
   - UI widgets per requirements.
4. Packaging helpers (LOCAL USE):
   - install_local.bat / install_local.ps1 to copy sources into Documents\NinjaTrader 8\bin\Custom\AddOns\TPOAddon and compile in-place.
   - build_ninjazip.bat to produce a zip with root=bin/, but note: NinjaTrader may only accept zips produced by its own Export; if rejected, install locally and Export from NT instead.

FUTURE-USE CONSIDERATIONS
- JSON consumed by indicators for LVN/HVN/POC/VAH/VAL, IB, inflection points.
- JSON stable & verbose: arrays, strings not ints, tickSize & pointValue included.
- Provide latest snapshot JSON for low-latency indicators.
- ROADMAP.md tracks features & versions.
